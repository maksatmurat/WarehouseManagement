@page "/shipments"
@inject IGenericService<Client> ClientService
@inject IGenericService<Resource> ResourceService
@inject IGenericService<UnitOfMeasure> UnitOfMeasureService
@inject IGenericService<ShipmentDocument> ShipmentDocumentService
@inject IShipmentService ShipmentService
<h2>Отгрузки</h2>

<div class="row mb-3">
    <div class="col">
        <label>Период</label>
        <InputDate @bind-Value="filter.FromDate" class="form-control" />
    </div>
    <div class="col">
        <label>&nbsp;</label>
        <InputDate @bind-Value="filter.ToDate" class="form-control" />
    </div>
    <div class="col">
        <label>Номер отгрузки</label>
        <InputText @bind-Value="filter.Number" class="form-control" placeholder="Номер отгрузки" />
    </div>
    <div class="col">
        <label>Клиент</label>
        <InputSelect @bind-Value="filter.ClientId" class="form-control">
            <option value="">Выберите</option>
            @foreach (var client in clients)
            {
                <option value="@client.Id">@client.Name</option>
            }
        </InputSelect>
    </div>
    <div class="col">
        <label>Ресурс</label>
        <InputSelect  @bind-Value="filter.ResourceId" class="form-control">
            <option value="">Выберите</option>
            @foreach (var resource in resources)
            {
                <option value="@resource.Id">@resource.Name</option>
            }
        </InputSelect>
    </div>
    <div class="col">
        <label>Единица измерения</label>
        <InputSelect @bind-Value="filter.UnitOfMeasureId" class="form-control">
            <option value="">Выберите</option>
            @foreach (var unit in units)
            {
                <option value="@unit.Id">@unit.Name</option>
            }
        </InputSelect>
    </div>
    <div class="col d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilter">Применить</button>
        <button class="btn btn-success" @onclick="NavigateToAdd">Добавить</button>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Номер</th>
            <th>Дата</th>
            <th>Клиент</th>
            <th>Статус</th>
            <th>Ресурс</th>
            <th>Единица измерения</th>
            <th>Количество</th>
        </tr>
    </thead>
    <tbody>
        @if (shipments.Any())
        {
            @foreach (var item in shipments)
            {
               number = item.Number;
                <tr @onclick="@(()=>NavigateToUpdate(number))">
                    <td>@item.Number</td>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.ClientName</td>
                    <td>
                        @if (item.IsSigned)
                        {
                            <span class="badge bg-success">Подписан</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Не подписан</span>
                        }
                    </td>
                    <td>@item.ResourceName</td>
                    <td>@item.UnitOfMeasureName</td>
                    <td>@item.Quantity</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">Нет данных</td>
            </tr>
        }
    </tbody>
</table>

@code {
    ShipmentFilterDto filter = new()
    {
        FromDate = DateTime.Today.AddDays(-360),
        ToDate = DateTime.Today
    };
    List<Client> clients = new();
    List<Resource> resources = new();
    List<ShipmentDocument> doc = new();
    List<UnitOfMeasure> units = new();
    List<ShipmentDocumentDto> shipments = new();
    public string number = "";
    protected override async Task OnInitializedAsync()
    {
        doc = await ShipmentDocumentService.GetAllAsync();
        clients = (await ClientService.GetAllAsync()).Where(c => c.IsActive).ToList();
        resources = (await ResourceService.GetAllAsync()).Where(r => r.IsActive).ToList();
        units = (await UnitOfMeasureService.GetAllAsync()).Where(u => u.IsActive).ToList();
        await ApplyFilter();
    }

    async Task ApplyFilter()
    {
        shipments = await ShipmentService.FilterAsync(filter);
    }
    private async Task NavigateToUpdate(string number)
    {

        var id = doc.Where(x => x.Number == number).Select(y=>y.Id).FirstOrDefault();
        NavManager.NavigateTo($"/shipments/update/{id}");

    }
    void NavigateToAdd()
    {
        NavManager.NavigateTo("/shipments/add");
    }
}